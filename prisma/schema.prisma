generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// ENUMS
// =====================

enum AppRole {
  USER
  MODERATOR
  ADMIN
}

enum Role {
  MEMBER
  MODERATOR
  HOST
}

enum EventType {
  GROUP
  STANDALONE
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  BANNED
  SUSPENDED
  PENDING_VERIFICATION
}

enum GroupStatus {
  ACTIVE
  INACTIVE
  BANNED
  SUSPENDED
  PENDING_VERIFICATION
}

enum SubscriptionPlanType {
  FREE
  PLUS
  PREMIUM
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Enum for notification types
enum NotificationType {
  FRIEND_REQUEST      // Friend request
  FRIEND_ACCEPTED     // Friend request accepted
  GROUP_INVITE        // Group invitation
  EVENT_INVITE        // Event invitation
}

// =====================
// MODELS
// =====================

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  username    String        @unique
  createdAt   DateTime      @default(now())
  role        AppRole       @default(USER)
  status      AccountStatus @default(PENDING_VERIFICATION)
  smallPhoto  String
  mediumPhoto String
  largePhoto  String

  profile    UserProfile?
  groups     GroupUser[]
  comments   Comment[]
  events     EventUser[]
  hostEvents Event[]

  // Relations for friend requests
  sentFriendRequests     FriendRequest[] @relation("sentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("receivedFriendRequests")

  // Relations for established friendships
  friendshipUser1 Friendship[] @relation("friendshipUser1")
  friendshipUser2 Friendship[] @relation("friendshipUser2")
  
  // Relation to notifications
  notifications Notification[]
}

model UserProfile {
  id          String  @id @default(uuid())
  bio         String?
  facebook    String?
  twitter     String?
  tiktok      String?
  youtube     String?
  instagram   String?
  phoneNumber String?

  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String                @unique
  categories CategoryUserProfile[]
  cities     CityUserProfile[]
}

model Group {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String

  status      GroupStatus @default(PENDING_VERIFICATION)
  smallPhoto  String
  mediumPhoto String
  largePhoto  String

  categories   CategoryGroup[]
  users        GroupUser[]
  cities       CityGroup[]
  comments     Comment[]
  events       Event[]
  subscription GroupSubscription?
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  canceled    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startAt     DateTime
  endAt       DateTime
  smallPhoto  String
  mediumPhoto String
  largePhoto  String

  eventType EventType @default(GROUP)

  // Optional relation to group (for group events)
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String?

  // Relation to the host for standalone events
  host   User?   @relation(fields: [hostId], references: [id])
  hostId String?

  users      EventUser[]
  cities     CityEvent[]
  categories CategoryEvent[]
}

model Comment {
  id        String   @id @default(uuid())
  rate      Int
  content   String
  createdAt DateTime @default(now())

  // Relation to the user who made the comment
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Relation to the group on which the comment is made
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
}

model Category {
  id       String                @id @default(uuid())
  value    String                @unique
  label    String                @unique
  groups   CategoryGroup[]
  events   CategoryEvent[]
  profiles CategoryUserProfile[]
}

model City {
  id       String            @id @default(uuid())
  value    String            @unique
  label    String            @unique
  groups   CityGroup[]
  events   CityEvent[]
  profiles CityUserProfile[]
}

model GroupUser {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  // Relation to the user who is part of the group
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Relation to the group
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@unique([userId, groupId])
}

model EventUser {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  // Relation to the user attending the event
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Relation to the event
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}

model CategoryGroup {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    String
}

model CategoryEvent {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
}

model CategoryUserProfile {
  id         String      @id @default(uuid())
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  profile    UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String
}

model CityGroup {
  id      String @id @default(uuid())
  city    City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
}

model CityEvent {
  id      String @id @default(uuid())
  city    City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}

model CityUserProfile {
  id        String      @id @default(uuid())
  city      City        @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId    String
  profile   UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
}

model GroupSubscription {
  id        String               @id @default(uuid())
  plan      SubscriptionPlanType
  startedAt DateTime             @default(now())
  expiresAt DateTime
  group     Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String               @unique
}

// =====================
// MODELS FOR FRIENDSHIPS
// =====================

model FriendRequest {
  id         String              @id @default(uuid())
  // Relation to the sender of the friend request
  sender     User                @relation("sentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  // Relation to the receiver of the friend request
  receiver   User                @relation("receivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([senderId, receiverId])
}

model Friendship {
  id        String   @id @default(uuid())
  // Always store the smaller (alphabetically) identifier as user1Id
  user1     User     @relation("friendshipUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id   String
  user2     User     @relation("friendshipUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id   String
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
}

// =====================
// NOTIFICATION MODEL
// =====================

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType
  // Relation to the recipient user of this notification
  recipient   User             @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  data        Json?            // Additional data specific to the notification (e.g., related friend request, group, or event ID)
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
}
