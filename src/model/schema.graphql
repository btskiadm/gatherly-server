# This schema was generated automatically by `pnpm generate` command
# from GraphQL API schema (http://localhost:4000/graphql).
#
# **DO NOT EDIT THIS FILE MANUALLY**

type Category {
  id: String!
  label: String!
  value: String!
}

type City {
  id: String!
  label: String!
  value: String!
}

type Comment {
  content: String!
  createdAt: Date!
  id: String!
  rate: Float!
  user: User!
}

input CreateEventInput {
  categories: [String!]!
  cities: [String!]!
  description: String!
  endAt: Date!
  startAt: Date!
  title: String!
}

type CreateEventReponse {
  eventId: String
  success: Boolean!
}

input CreateGroupInput {
  categories: [String!]!
  cities: [String!]!
  description: String!
  title: String!
}

type CreateGroupReponse {
  groupId: String
  success: Boolean!
}

scalar Date

type DeleteGroupResponse {
  success: Boolean!
}

type Event {
  canceled: Boolean!
  categories: [Category!]!
  cities: [City!]!
  createdAt: Date!
  description: String!
  endAt: Date!
  id: String!
  remote: Boolean!
  sponsored: Boolean!
  startAt: Date!
  title: String!
  users: [EventUser!]!
  verified: Boolean!
}

type EventGroup {
  canceled: Boolean!
  categories: [Category!]!
  cities: [City!]!
  createdAt: Date!
  description: String!
  endAt: Date!
  id: String!
  remote: Boolean!
  sponsored: Boolean!
  startAt: Date!
  title: String!
  users: [EventUser!]!
  verified: Boolean!
}

type EventUser {
  id: String!
  isHost: Boolean!
  isModerator: Boolean!
  user: User!
}

type FromToDate {
  endAt: String!
  id: String!
  startAt: String!
}

type GroupDetails {
  cancelled: [GroupedEvents!]!
  cancelledLength: Int!
  categories: [Category!]!
  cities: [City!]!
  comments: [Comment!]!
  createdAt: Date!
  description: String!
  events: [EventGroup!]!
  eventsLength: Int!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  members: [GroupUser!]!
  past: [GroupedEvents!]!
  pastLength: Int!
  pending: [GroupedEvents!]!
  pendingLength: Int
  rate: Float!
  remote: Boolean!
  smallPhoto: String!
  sponsored: Boolean!
  title: String!
  upcoming: [GroupedEvents!]!
  upcomingLength: Int!
  verified: Boolean!
}

type GroupTile {
  categories: [Category!]!
  cities: [City!]!
  createdAt: Date!
  description: String!
  eventsCount: Int!
  id: String!
  isSponsored: Boolean!
  isVerified: Boolean!
  largePhoto: String!
  mediumPhoto: String!
  membersCount: Int!
  smallPhoto: String!
  sponsoredUntil: Date
  title: String!
  updatedAt: Date!
}

type GroupUser {
  id: String!
  isHost: Boolean!
  isModerator: Boolean!
  user: User!
}

type GroupedEvents {
  events: [EventGroup!]!
  monthReference: String!
}

type JoinGroupReponse {
  success: Boolean!
}

type LeaveGroupReponse {
  success: Boolean!
}

type Mutation {
  createEvent(createEventInput: CreateEventInput!, groupId: String!): CreateEventReponse!
  createGroup(createGroupInput: CreateGroupInput!): CreateGroupReponse!
  joinGroup(groupId: String!): JoinGroupReponse!
  leaveGroup(groupId: String!): LeaveGroupReponse!
}

type Profile {
  bio: String!
  id: String!
}

type Query {
  getCategories: [Category!]!
  getCities: [City!]!
  getGroupDetails(groupId: String!): GroupDetails
  getGroupTiles(categories: [String!]!, cities: [String!]!, dateOfAdding: String!, maxMembers: Int!, minMembers: Int!, numberOfMembers: String!, remote: Boolean!, sponsored: Boolean!, titles: [String!]!, verified: Boolean!): [GroupTile!]!
  getGroupTitles(title: String!): [Title!]!
  getUsedCategories: [Category!]!
  getUsedCities: [City!]!
  getUserWithProfile(username: String!): UserWithProfile
  getUsers: [User!]!
  getUsersByUsername(username: String!): [User!]!
}

enum Role {
  ADMIN
  USER
}

type Title {
  id: String!
  label: String!
  value: String!
}

type User {
  createdAt: Date!
  email: String!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  role: Role!
  smallPhoto: String!
  username: String!
  verifiedAt: Date
}

type UserWithProfile {
  createdAt: Date!
  email: String!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  profile: Profile
  role: Role!
  smallPhoto: String!
  username: String!
}