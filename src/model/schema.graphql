# This schema was generated automatically by `pnpm generate` command
# from GraphQL API schema (http://localhost:4000/graphql).
#
# **DO NOT EDIT THIS FILE MANUALLY**

enum AccountStatus {
  ACTIVE
  BANNED
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

input AddGroupCommentInput {
  content: String!
  rate: Int!
}

type AddGroupCommentResponse {
  comment: Comment
  success: Boolean!
}

enum AppRole {
  ADMIN
  MODERATOR
  USER
}

type Category {
  id: String!
  label: String!
  value: String!
}

type CategoryUserProfile {
  category: Category!
}

type CheckUserGroupPermission {
  role: Role
}

type City {
  id: String!
  label: String!
  value: String!
}

type CityUserProfile {
  city: City!
}

type Comment {
  content: String!
  createdAt: Date!
  id: String!
  rate: Float!
  user: User!
}

input CreateEventInput {
  categories: [String!]!
  cities: [String!]!
  description: String!
  endAt: Date!
  startAt: Date!
  title: String!
}

type CreateEventReponse {
  eventId: String
  success: Boolean!
}

input CreateGroupInput {
  categories: [String!]!
  cities: [String!]!
  description: String!
  title: String!
}

type CreateGroupReponse {
  groupId: String
  success: Boolean!
}

scalar Date

type DeleteGroupResponse {
  success: Boolean!
}

type Event {
  canceled: Boolean!
  categories: [Category!]!
  cities: [City!]!
  createdAt: Date!
  description: String!
  endAt: Date!
  id: String!
  startAt: Date!
  title: String!
  users: [EventUser!]!
}

interface EventBase {
  canceled: Boolean!
  createdAt: Date!
  description: String!
  endAt: Date!
  eventType: EventType!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  smallPhoto: String!
  startAt: Date!
  title: String!
  updatedAt: Date!
}

type EventTile implements EventBase {
  canceled: Boolean!
  categories: [Category!]!
  cities: [City!]!
  createdAt: Date!
  description: String!
  endAt: Date!
  eventType: EventType!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  smallPhoto: String!
  startAt: Date!
  title: String!
  updatedAt: Date!
  usersCount: Int!
}

enum EventType {
  GROUP
  STANDALONE
}

type EventUser {
  id: String!
  role: Role!
  user: User!
}

type GetEventTilesByUserIdReponse {
  count: Int!
  events: [EventTile!]!
}

type GetGroupCommentsResponse {
  comments: [Comment!]!
}

type GetGroupsByUserIdReponse {
  count: Int!
  groups: [GroupTile!]!
}

interface GroupBase {
  createdAt: Date!
  description: String!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  smallPhoto: String!
  title: String!
  updatedAt: Date!
}

type GroupDetails implements GroupBase {
  cancelled: [GroupedEvents!]!
  cancelledLength: Int!
  categories: [Category!]!
  cities: [City!]!
  comments: [Comment!]!
  createdAt: Date!
  description: String!
  events: [EventTile!]!
  eventsLength: Int!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  past: [GroupedEvents!]!
  pastLength: Int!
  pending: [GroupedEvents!]!
  pendingLength: Int
  rate: Float!
  smallPhoto: String!
  title: String!
  upcoming: [GroupedEvents!]!
  upcomingLength: Int!
  updatedAt: Date!
  users: [GroupUser!]!
}

enum GroupStatus {
  ACTIVE
  BANNED
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

type GroupTile implements GroupBase {
  categories: [Category!]!
  cities: [City!]!
  createdAt: Date!
  description: String!
  eventsCount: Int!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  smallPhoto: String!
  title: String!
  updatedAt: Date!
  usersCount: Int!
}

type GroupUser {
  id: String!
  role: Role!
  user: User!
}

type GroupWithStatus implements GroupBase {
  categories: [Category!]!
  cities: [City!]!
  createdAt: Date!
  description: String!
  eventsCount: Int!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  smallPhoto: String!
  status: GroupStatus!
  title: String!
  updatedAt: Date!
  usersCount: Int!
}

type GroupedEvents {
  events: [EventTile!]!
  monthReference: String!
}

type JoinGroupReponse {
  success: Boolean!
}

type LeaveGroupReponse {
  success: Boolean!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type LogoutResponse {
  status: String!
}

type Mutation {
  addGroupComment(addGroupCommentInput: AddGroupCommentInput!, groupId: String!): AddGroupCommentResponse!
  createEvent(createEventInput: CreateEventInput!, groupId: String!): CreateEventReponse!
  createGroup(createGroupInput: CreateGroupInput!): CreateGroupReponse!
  joinGroup(groupId: String!): JoinGroupReponse!
  leaveGroup(groupId: String!): LeaveGroupReponse!
  login(password: String!, username: String!): LoginResponse
  logout: LogoutResponse
  refreshToken: RefreshTokenResponse
}

type Profile {
  bio: String
  categories: [CategoryUserProfile!]!
  cities: [CityUserProfile!]!
  facebook: String
  id: String!
  instagram: String
  phoneNumber: String
  tiktok: String
  twitter: String
  youtube: String
}

type Query {
  checkUserGroupPermissions(groupId: String!): CheckUserGroupPermission!
  getCategories: [Category!]!
  getCities: [City!]!
  getEventTilesByUserId(skip: Int, take: Int, userId: String!): GetEventTilesByUserIdReponse!
  getGroupComments(groupId: String!): GetGroupCommentsResponse!
  getGroupDetails(groupId: String!): GroupDetails
  getGroupTiles(categories: [String!]!, cities: [String!]!, dateOfAdding: String!, maxMembers: Int!, minMembers: Int!, numberOfMembers: String!, titles: [String!]!): [GroupTile!]!
  getGroupTilesByUserId(skip: Int, take: Int, userId: String!): GetGroupsByUserIdReponse!
  getGroupTitles(title: String!): [Title!]!
  getUsedCategories: [Category!]!
  getUsedCities: [City!]!
  getUserWithProfile(userId: String!): UserWithProfile
  getUsers: [User!]!
  getUsersByUsername(username: String!): [User!]!
  groups: [GroupWithStatus!]!
  me: User
  users: [User!]!
}

type RefreshTokenResponse {
  accessToken: String!
  user: User!
}

enum Role {
  HOST
  MEMBER
  MODERATOR
}

type Title {
  id: String!
  label: String!
  value: String!
}

type User implements UserBase {
  createdAt: Date!
  email: String!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  role: AppRole!
  smallPhoto: String!
  status: AccountStatus!
  username: String!
}

interface UserBase {
  createdAt: Date!
  email: String!
  id: String!
  mediumPhoto: String!
  role: AppRole!
  smallPhoto: String!
  status: AccountStatus!
  username: String!
}

type UserWithProfile implements UserBase {
  createdAt: Date!
  email: String!
  id: String!
  largePhoto: String!
  mediumPhoto: String!
  profile: Profile!
  role: AppRole!
  smallPhoto: String!
  status: AccountStatus!
  username: String!
}