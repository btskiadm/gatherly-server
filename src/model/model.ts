/**
* This code was generated automatically by `pnpm generate` command
* from GraphQL API schema (`./app/model/schema.graphql`).
*
* **DO NOT EDIT THIS FILE MANUALLY**
*/

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: any; output: any; }
};

export type Category = {
  __typename?: 'Category';
  id: Scalars['String']['output'];
  label: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type City = {
  __typename?: 'City';
  id: Scalars['String']['output'];
  label: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type Comment = {
  __typename?: 'Comment';
  content: Scalars['String']['output'];
  createdAt: Scalars['Date']['output'];
  id: Scalars['String']['output'];
  rate: Scalars['Float']['output'];
  user: User;
};

export type Event = {
  __typename?: 'Event';
  canceled: Scalars['Boolean']['output'];
  categories: Array<Category>;
  cities: Array<City>;
  createdAt: Scalars['Date']['output'];
  description: Scalars['String']['output'];
  endAt: Scalars['Date']['output'];
  id: Scalars['String']['output'];
  remote: Scalars['Boolean']['output'];
  sponsored: Scalars['Boolean']['output'];
  startAt: Scalars['Date']['output'];
  title: Scalars['String']['output'];
  users: Array<EventUser>;
  verified: Scalars['Boolean']['output'];
};

export type EventGroup = {
  __typename?: 'EventGroup';
  canceled: Scalars['Boolean']['output'];
  categories: Array<Category>;
  cities: Array<City>;
  createdAt: Scalars['Date']['output'];
  description: Scalars['String']['output'];
  endAt: Scalars['Date']['output'];
  id: Scalars['String']['output'];
  remote: Scalars['Boolean']['output'];
  sponsored: Scalars['Boolean']['output'];
  startAt: Scalars['Date']['output'];
  title: Scalars['String']['output'];
  users: Array<EventUser>;
  verified: Scalars['Boolean']['output'];
};

export type EventUser = {
  __typename?: 'EventUser';
  id: Scalars['String']['output'];
  isHost: Scalars['Boolean']['output'];
  isModerator: Scalars['Boolean']['output'];
  user: User;
};

export type FromToDate = {
  __typename?: 'FromToDate';
  endAt: Scalars['String']['output'];
  id: Scalars['String']['output'];
  startAt: Scalars['String']['output'];
};

export type GroupDetails = {
  __typename?: 'GroupDetails';
  cancelled: Array<GroupedEvents>;
  cancelledLength: Scalars['Int']['output'];
  categories: Array<Category>;
  cities: Array<City>;
  comments: Array<Comment>;
  createdAt: Scalars['Date']['output'];
  description: Scalars['String']['output'];
  events: Array<EventGroup>;
  eventsLength: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  largePhoto: Scalars['String']['output'];
  mediumPhoto: Scalars['String']['output'];
  members: Array<GroupUser>;
  past: Array<GroupedEvents>;
  pastLength: Scalars['Int']['output'];
  pending: Array<GroupedEvents>;
  pendingLength?: Maybe<Scalars['Int']['output']>;
  rate: Scalars['Float']['output'];
  remote: Scalars['Boolean']['output'];
  smallPhoto: Scalars['String']['output'];
  sponsored: Scalars['Boolean']['output'];
  title: Scalars['String']['output'];
  upcoming: Array<GroupedEvents>;
  upcomingLength: Scalars['Int']['output'];
  verified: Scalars['Boolean']['output'];
};

export type GroupTile = {
  __typename?: 'GroupTile';
  categories: Array<Category>;
  cities: Array<City>;
  createdAt: Scalars['Date']['output'];
  description: Scalars['String']['output'];
  eventsCount: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  isSponsored: Scalars['Boolean']['output'];
  isVerified: Scalars['Boolean']['output'];
  largePhoto: Scalars['String']['output'];
  mediumPhoto: Scalars['String']['output'];
  membersCount: Scalars['Int']['output'];
  smallPhoto: Scalars['String']['output'];
  sponsoredUntil?: Maybe<Scalars['Date']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['Date']['output'];
};

export type GroupUser = {
  __typename?: 'GroupUser';
  isHost: Scalars['Boolean']['output'];
  isModerator: Scalars['Boolean']['output'];
  user: User;
};

export type GroupedEvents = {
  __typename?: 'GroupedEvents';
  events: Array<EventGroup>;
  monthReference: Scalars['String']['output'];
};

export type Profile = {
  __typename?: 'Profile';
  bio: Scalars['String']['output'];
  id: Scalars['String']['output'];
};

export type Query = {
  __typename?: 'Query';
  getCategories: Array<Category>;
  getCities: Array<City>;
  getGroupDetails?: Maybe<GroupDetails>;
  getGroupTiles: Array<GroupTile>;
  getGroupTitles: Array<Title>;
  getUsedCategories: Array<Category>;
  getUsedCities: Array<City>;
  getUserWithProfile: UserWithProfile;
  getUsers: Array<User>;
  getUsersByUsername: Array<User>;
};


export type QueryGetGroupDetailsArgs = {
  groupId: Scalars['String']['input'];
};


export type QueryGetGroupTilesArgs = {
  categories: Array<Scalars['String']['input']>;
  cities: Array<Scalars['String']['input']>;
  dateOfAdding: Scalars['String']['input'];
  maxMembers: Scalars['Int']['input'];
  minMembers: Scalars['Int']['input'];
  numberOfMembers: Scalars['String']['input'];
  remote: Scalars['Boolean']['input'];
  sponsored: Scalars['Boolean']['input'];
  titles: Array<Scalars['String']['input']>;
  verified: Scalars['Boolean']['input'];
};


export type QueryGetGroupTitlesArgs = {
  title: Scalars['String']['input'];
};


export type QueryGetUserWithProfileArgs = {
  username: Scalars['String']['input'];
};


export type QueryGetUsersByUsernameArgs = {
  username?: InputMaybe<Scalars['String']['input']>;
};

export type Role =
  | 'ADMIN'
  | 'USER';

export type Title = {
  __typename?: 'Title';
  id: Scalars['String']['output'];
  label: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['Date']['output'];
  email: Scalars['String']['output'];
  id: Scalars['String']['output'];
  largePhoto: Scalars['String']['output'];
  mediumPhoto: Scalars['String']['output'];
  role: Role;
  smallPhoto: Scalars['String']['output'];
  username: Scalars['String']['output'];
  verifiedAt?: Maybe<Scalars['Date']['output']>;
};

export type UserWithProfile = {
  __typename?: 'UserWithProfile';
  createdAt: Scalars['Date']['output'];
  email: Scalars['String']['output'];
  id: Scalars['String']['output'];
  largePhoto: Scalars['String']['output'];
  mediumPhoto: Scalars['String']['output'];
  profile?: Maybe<Profile>;
  role: Role;
  smallPhoto: Scalars['String']['output'];
  username: Scalars['String']['output'];
};
